<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

  <!-- 
        AOP (Aspect Oriented Programming，剖面導向程式設計)的主要目的是針對業務處理過程中的剖面進行分析，所面對的是處理過程中的某個步驟或階段，
    以獲得邏輯過程中各部分之間低耦合性的隔離效果。可以透過預先編譯方式和執行時動態代理，實現在不修改原始程式碼的情況下，統一給程式動態增加功能的一種技術。
    AOP 實際上是 GoF 設計模式的延續，設計模式追求的是呼叫者和被呼叫者之間的解耦，AOP 可以說也是這種目標的一種實現。
    
       本章以 AOP 術語以及 AOP 的簡單實現展開， 逐步深入介紹 AOP 通知型態與使用、切點的定義與應用以及引入通知、代理工廠和自動代理。 
      
    (1) AOP： Spring 最被入重視的另一方面是支援 AOP 的實現，然而 AOP Framewok 只是 Spring 的一個子 Framework ，稱 Spring Framework 為 AOP Framework
              並不是一個適當的描述，人們對 AOP 的關心反映在 Spring 上，使得對於 Spring 的關心集中在它的 AOP Framework 上。
              舉個實際的例子來說明 AOP 的功能之一。例如，有個記錄檔 (Logging)的需求，可以無須修改任何一行程式碼，就可以將這個需求加入至原先的應用程式中，
              也可以在不修改任何程式碼的情況下將這個記錄檔的功能移除。Spring 的 IoC 容器功能與 AOP 功能的實現是其重心所在，在 Spring 下實現了持久層、
              MVC Web Framework 以及各種企業服務的 API 封裝，它們的實現有些相依於 Spring 的 IoC 容器與 AOP 功能、Spring 的這些子 Framework 或封裝的 API
              功能彼可以獨立，也可以結合其他的 Framework 方案加以替代，Spring 希望提供一站式的 Framework 整合方式。
    
    (2) Web Framework：Spirng 也提供 MVC Framework 的解決方案，使用 Spring Web Framework 的好處是可以兼用 IoC 與 AOP 的功能，甚至可以輕鬆地替換使用不同的 
                       View 層技術，例如使用 JSP 、結果 Tiles 作為展現給使用者的畫面技術。也可以將自己熟悉的 Web Framework 與 Spring 進行整合，
                       例如： Struts、JSF 等，都可以與 Spring 進行整合，而且適用於所開發的應用程式。 
                  
    (3) 剖面： 剖面(Aspect) 是指需要實現的交叉功能。是應用系統模組化的一個剖面領域。剖面最常見的例子是記錄檔記錄。系統中到處都需要使用記錄檔記錄，
               利用繼承來重用紀錄檔模組不適合。然而，可以建立一個記錄檔記錄剖面，在系統中透過使用 AOP 技術來應用。
    
    (4) 連接點：連接點(Joinpoint)是應用程式執行過程中插入剖面的地點。這個地點可以是方法呼叫、例外拋出，或者需要修改的攔位元。在這些地方將剖面程式碼插入
                到應用流程中，可以增加新的行為。
    
    (5) 通知：通知(Advice)是剖面的實際實現。通知將應用系統新的行為。在記錄檔例子中，記錄檔通知包含了實現實際記錄檔功能的程式碼，例如向記錄檔檔案寫記錄檔。
              通知在連接點插入到應用系統中。 
    
    (6) 切入點：切入點(Pointcut)定義了通知應該應用在哪些連接點。通知可以應用到 AOP Framework 支援的任何連接點。當然，並不希望將所有剖面應用到所有可能的
                連接點上。切入點用於指定將通知應用到什麼地方。通常透過指定類別名和方法名，或者比對類別名和方法名的正則運算式來指定切入點。
                一些 AOP Framework 允許動態建立切入點，在執行時根據條件決定是否應用剖面，如方法參數值。
    
    (7) 引入：引入(Introduction)允許為已存在類別增加新方法和屬性。例如，可以建立一個稽查通知來記錄物件的最後修改時間。只要用一個方法 setLastModified(Date)
              以及一個儲存這個狀態的變數，可以在不改變已存在類別的情況下將這個方法與變數參考，給它們新的行為和狀態。
    
    (8) 目標物件：目標物件(Target Object) 是被通知物件。既可以是撰寫的類別，也可以是需要增加指定行為的協力廠商類別。如果沒有 AOP ，這個類別就必須包含
                  它的主要邏輯以及其他交叉業務邏輯。有了 AOP ，目標物件就可以完全地關心主要業務，不再關心應用其上的通知。  
    
    (9) AOP 代理：代理(AOP Proxy)是將通知應用至目標物件後建立的物件。對於客戶物件來說，目標物件(應用 AOP 之前的物件)和代理物件(應用 AOP 之後的物件)
                  是一樣的。也就是說，應用系統的其他部份不用為了支援代理物件而改變。
    
    (10) 織入：織入(Weaving)是將剖面應用到目標物件從而建立一個新的代理物件的過程。剖面在指定接入點被織入到目標物件中。
       
           
  -->



</beans>