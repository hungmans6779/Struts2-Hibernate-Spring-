<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

  <!-- 
        AOP (Aspect Oriented Programming，剖面導向程式設計)的主要目的是針對業務處理過程中的剖面進行分析，所面對的是處理過程中的某個步驟或階段，
    以獲得邏輯過程中各部分之間低耦合性的隔離效果。可以透過預先編譯方式和執行時動態代理，實現在不修改原始程式碼的情況下，統一給程式動態增加功能的一種技術。
    AOP 實際上是 GoF 設計模式的延續，設計模式追求的是呼叫者和被呼叫者之間的解耦，AOP 可以說也是這種目標的一種實現。
    
       本章以 AOP 術語以及 AOP 的簡單實現展開， 逐步深入介紹 AOP 通知型態與使用、切點的定義與應用以及引入通知、代理工廠和自動代理。 
      
    (1) AOP： Spring 最被入重視的另一方面是支援 AOP 的實現，然而 AOP Framewok 只是 Spring 的一個子 Framework ，稱 Spring Framework 為 AOP Framework
              並不是一個適當的描述，人們對 AOP 的關心反映在 Spring 上，使得對於 Spring 的關心集中在它的 AOP Framework 上。
              舉個實際的例子來說明 AOP 的功能之一。例如，有個記錄檔 (Logging)的需求，可以無須修改任何一行程式碼，就可以將這個需求加入至原先的應用程式中，
              也可以在不修改任何程式碼的情況下將這個記錄檔的功能移除。Spring 的 IoC 容器功能與 AOP 功能的實現是其重心所在，在 Spring 下實現了持久層、
              MVC Web Framework 以及各種企業服務的 API 封裝，它們的實現有些相依於 Spring 的 IoC 容器與 AOP 功能、Spring 的這些子 Framework 或封裝的 API
              功能彼可以獨立，也可以結合其他的 Framework 方案加以替代，Spring 希望提供一站式的 Framework 整合方式。
    
    (2) Web Framework：Spirng 也提供 MVC Framework 的解決方案，使用 Spring Web Framework 的好處是可以兼用 IoC 與 AOP 的功能，甚至可以輕鬆地替換使用不同的 
                       View 層技術，例如使用 JSP 、結果 Tiles 作為展現給使用者的畫面技術。也可以將自己熟悉的 Web Framework 與 Spring 進行整合，
                       例如： Struts、JSF 等，都可以與 Spring 進行整合，而且適用於所開發的應用程式。 
                  
    (3) 剖面： 剖面(Aspect) 是指需要實現的交叉功能。是應用系統模組化的一個剖面領域。剖面最常見的例子是記錄檔記錄。系統中到處都需要使用記錄檔記錄，
               利用繼承來重用紀錄檔模組不適合。然而，可以建立一個記錄檔記錄剖面，在系統中透過使用 AOP 技術來應用。
    
    (4) 連接點：連接點(Joinpoint)是應用程式執行過程中插入剖面的地點。這個地點可以是方法呼叫、例外拋出，或者需要修改的攔位元。在這些地方將剖面程式碼插入
                到應用流程中，可以增加新的行為。
    
    (5) 通知：通知(Advice)是剖面的實際實現。通知將應用系統新的行為。在記錄檔例子中，記錄檔通知包含了實現實際記錄檔功能的程式碼，例如向記錄檔檔案寫記錄檔。
              通知在連接點插入到應用系統中。 
    
    (6) 切入點：切入點(Pointcut)定義了通知應該應用在哪些連接點。通知可以應用到 AOP Framework 支援的任何連接點。當然，並不希望將所有剖面應用到所有可能的
                連接點上。切入點用於指定將通知應用到什麼地方。通常透過指定類別名和方法名，或者比對類別名和方法名的正則運算式來指定切入點。
                一些 AOP Framework 允許動態建立切入點，在執行時根據條件決定是否應用剖面，如方法參數值。
    
    (7) 引入：引入(Introduction)允許為已存在類別增加新方法和屬性。例如，可以建立一個稽查通知來記錄物件的最後修改時間。只要用一個方法 setLastModified(Date)
              以及一個儲存這個狀態的變數，可以在不改變已存在類別的情況下將這個方法與變數參考，給它們新的行為和狀態。
    
    (8) 目標物件：目標物件(Target Object) 是被通知物件。既可以是撰寫的類別，也可以是需要增加指定行為的協力廠商類別。如果沒有 AOP ，這個類別就必須包含
                  它的主要邏輯以及其他交叉業務邏輯。有了 AOP ，目標物件就可以完全地關心主要業務，不再關心應用其上的通知。  
    
    (9) AOP 代理：代理(AOP Proxy)是將通知應用至目標物件後建立的物件。對於客戶物件來說，目標物件(應用 AOP 之前的物件)和代理物件(應用 AOP 之後的物件)
                  是一樣的。也就是說，應用系統的其他部份不用為了支援代理物件而改變。
    
    (10) 織入：織入(Weaving)是將剖面應用到目標物件從而建立一個新的代理物件的過程。剖面在指定接入點被織入到目標物件中。
          
       
    
    
    
       
    【建立 Advice】 
     
    通知包含了剖面的邏輯，所以當建立一個通知物件時，即撰寫實現交叉功能的程式碼，而且 Spring 連接點模型建立在方法攔截上，這表示撰寫的 Spring 通知會
    在方法呼叫周圍的各個地方織入系統中。因為 Spring 可以在方法執行的多個地方織入通知，所以有多種通知型態，如下所示。
    
    ◆ 前置通知(Before Advice)：在目標方法執行之前被呼叫。所對應的介面是 org.springFramework.aop.BeforeAdvice。
    ◆ 後置通知 (After Adivce)：在目標方法執行之後被呼叫。所對應的介面是 org.springFramework.aop.AfterReturningAdvice。
    ◆ 環繞通知 (Around Advice)：在目標方法執行前後被呼叫。所對應的介面是 org.aopalliance.intercept.MethodInterceptor。
    ◆ 例外通知 (After Throwing Advice)：在目標方法拋出例外後被呼叫。所對應的介面是 org.springFramework.aop.ThrowsAdvice。
    ◆ 引入通知 (Introduction Advice)：在目標類別中增加一些新的方法和屬性。
      
  -->





  <!-- 前置通知 Before Advice (MethodBeforeAdvice) -->
  <bean id="greetingBeforeAdvice" class="aop.beforeAdvice.advice.impl.GreetingBeforeAdvice"        />
  
  <!-- 後置通知 After Advice (AfterReturningAdvice) -->
  <bean id="greetingAfterAdvice" class="aop.afterReturningAdvice.advice.impl.GreetingAfterAdvice"  />
  
  <!-- 環繞通知 Around Advice (MethodInterceptor) -->
  <bean id="greetingAroundAdvice" class="aop.aroundAdvice.advice.impl.GreetingAroundAdvice"        />
 
  <!-- 例外通知 Throws Advice (ThrowsAdvice) -->
  <bean id="execptionAdvice" class="aop.throwsAdvice.advice.impl.ExceptionAdvice"                  />
  
  
  
  
  
  <!-- 使用 Spring 代理工廠設定一個代理  -->
  <!-- 
    ProxyFactoryBean 是 FactoryBean 介面的實現類別，負責為其他 Bean 建立代理實例，在內部使用 ProxyFactory 來完成這一工作。
    下面來詳細說明 ProxyFactoryBean 的常用設定屬性：
   
    ＊ proxyInterfaces：代理所有實現的介面，可以是多個介面。該屬性還有一個別名屬性 interfaces。
    
    ＊ interceptorNames：需要織入目標物件的前置通知類別陣列(必須採用全限定類別名)，在內部 interceptorNames 是一個字串陣列， 
                         ProxyFactoryBean 透過反射機制獲得對應的類別，它們可以是攔截器、通知或者包含通知和切點的 Advisor，設定中的順序對應呼叫的順序。
    
    ＊ target：代理目標物件。
    
    ＊ singleton：傳回的代理是否是單例，預設為單實例。 
    
    ＊ optimize：當設定為 true 時，強制使用 CGLIB 代理。對於 singleton 的代理，推薦使用 CGLIB ，對於其他作用攔位元型別的代理，最好使用 JDK 代理 。
                 原因是 CGLIB 建立代理速度慢，而產出的代理物件執行效率高，而使用 JDK 代理的表現正好相反。
              
    ＊ proxyTargetClass：是否對類別進行代理，而不是對介面進行代理，設定為 true時，使用 CGLIB 代理。
    
    
    
    
    
    ※ 在 Spring AOP 中，為目標 Bean 織入橫切邏輯時，使用的動態代理技術有 JDK 動態代理和 CGLIB 動態代理。
              
              
              
               
     § AOP 的代理模式
     
     代理模式是 Spring 中常用的設計模式。Spring 提供了幾個常用的代理類別，例如普通的代理類別、交易代理類別等。
     
     
     ProxyFactoryBean 代理工廠物件
     設定 AopServiceImpl 時使用了 org.springframework.aop.framework.ProxyFactoryBean 類別。
     這是 Spring 內建的代理類別，引入了一個中間層，能夠建立不同類型的物件。利用它可以實現任何形式的AOP。
        
        
     TransactionProxyFactoryBean  交易代理工廠物件  
     另一個很有用的代理類別是 TransactionProxyFactoryBean，是 ProxyFactoryBean 的子類別，常用在資料庫程式設計上。
     Spring 利用 TransactionProxyFactoryBean 對交易進行管理，在指定方法前利用 AOP 連接資料庫並開啟交易，
     然後在指定方法傳回後利用 AOP 傳送交易並斷開資料庫。
     
     
     AOP 模組提供對方面導向程式設計的支援。Spring 提供三種攔截器：方法前攔截器、傳回後攔截器、例外拋出攔截器。
     分別在方法執行前、執行後、例外拋出後執行。
     攔截器能夠作用在指定的類別、指定的方法上、能夠使用 Spring 的資料來源等資料。
               
  -->
  
  
  <!-- 前置通知 範例  -->
  <bean id="reception_BeforeAdvice" class="org.springframework.aop.framework.ProxyFactoryBean" >
  
    <!-- 指定代理介面，如果是多個介面，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="proxyInterfaces" value="aop.beforeAdvice.service.Reception" />
    -->
    <property name="proxyInterfaces" >
      <list>
        <value>aop.beforeAdvice.service.Reception</value>
      </list>
    </property>
    
    
    <!-- 攔截器，指定通知，如果是多個，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="interceptorNames" value="greetingBeforeAdvice" />
     -->
    <property name="interceptorNames" >
      <list>
        <value>greetingBeforeAdvice</value>
      </list>
    </property>
    
    
    <!-- 被攔截的物件，指定目標物件 -->
    <property name="target"  >
      <bean class="aop.beforeAdvice.service.impl.ConcreteReception" />  <!-- 採用匿名類別物件的方式  -->
    </property>
    
  </bean>















  <!-- 後置通知 範例  -->
  <bean id="reception_AfterAdvice" class="org.springframework.aop.framework.ProxyFactoryBean" >
  
    <!-- 指定代理介面，如果是多個介面，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="proxyInterfaces" value="aop.beforeAdvice.service.Reception" />
    -->
    <property name="proxyInterfaces" >
      <list>
        <value>aop.beforeAdvice.service.Reception</value>
      </list>
    </property>
    
    
    <!-- 攔截器，指定通知，如果是多個，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="interceptorNames" value="greetingAfterAdvice" />
     -->
    <property name="interceptorNames" >
      <list>
        <value>greetingAfterAdvice</value>
      </list>
    </property>
    
    
    <!-- 被攔截的物件，指定目標物件 -->
    <property name="target"  >
      <bean class="aop.beforeAdvice.service.impl.ConcreteReception" />  <!-- 採用匿名類別物件的方式  -->
    </property>
    
  </bean>















  <!-- 環繞通知 範例  -->
  <bean id="reception_AroundAdvice" class="org.springframework.aop.framework.ProxyFactoryBean" >
  
    <!-- 指定代理介面，如果是多個介面，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="proxyInterfaces" value="aop.beforeAdvice.service.Reception" />
    -->
    <property name="proxyInterfaces" >
      <list>
        <value>aop.beforeAdvice.service.Reception</value>
      </list>
    </property>
    
    
    <!-- 攔截器，指定通知，如果是多個，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="interceptorNames" value="greetingAroundAdvice" />
     -->
    <property name="interceptorNames" >
      <list>
        <!-- 
          <idref> 與 <ref> 的區別
          <idref> 與 <ref> 的作用是一樣的，都是設定 Java 物件的。 <idref>的用也與 <ref> 基本相同，
          不同的是，<idref>只有 bean 及 local 屬性，沒有 parent 屬性。
    
          Spring 載入 XML 設定檔時，會檢查 <idref> 設定的 Bean 存在不存在。而<ref> 只會在第一次呼叫時才會檢查。
          換句話說，如果 Bean 不存在，<idref> 能在啟動程式的時候就拋出錯誤，而<ref> 只會在執行中拋出錯誤。
        -->
        <idref local="greetingAroundAdvice" />
      </list>
      <!-- 
      <list>
        <value>greetingAroundAdvice</value>
      </list>
       -->
    </property>
    
    
    <!-- 被攔截的物件，指定目標物件 -->
    <property name="target"  >
      <bean class="aop.beforeAdvice.service.impl.ConcreteReception" />  <!-- 採用匿名類別物件的方式  -->
    </property>
    
  </bean>















  <!-- 例外通知 範例  -->
  <bean id="advice_throws" class="org.springframework.aop.framework.ProxyFactoryBean" >
  
    <!-- 是否對類別進行代理，而不是對介面進行代理，設定為 true時，使用 CGLIB 代理  -->
    <property name="proxyTargetClass" value="true" />
    
    
    <!-- 攔截器，指定通知，如果是多個，可以使用 <list> 元素指定 -->
    <!-- 
    <property name="interceptorNames" value="execptionAdvice" />
     -->
    <property name="interceptorNames" >
      <list>
        <!-- 
          <idref> 與 <ref> 的區別
          <idref> 與 <ref> 的作用是一樣的，都是設定 Java 物件的。 <idref>的用也與 <ref> 基本相同，
          不同的是，<idref>只有 bean 及 local 屬性，沒有 parent 屬性。
    
          Spring 載入 XML 設定檔時，會檢查 <idref> 設定的 Bean 存在不存在。而<ref> 只會在第一次呼叫時才會檢查。
          換句話說，如果 Bean 不存在，<idref> 能在啟動程式的時候就拋出錯誤，而<ref> 只會在執行中拋出錯誤。
        -->
        <idref local="execptionAdvice" />
      </list>
      <!-- 
      <list>
        <value>execptionAdvice</value>
      </list>
       -->
    </property>
    
    
    <!-- 被攔截的物件，指定目標物件 -->
    <property name="target"  >
      <bean class="aop.throwsAdvice.service.impl.BusinessCode" />  <!-- 採用匿名類別物件的方式  -->
    </property>
    
  </bean>
  
    
    
    
    
    
    
    
    
  
</beans>